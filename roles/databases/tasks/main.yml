- name: Ignore warnings raised for files with unknown extensions while loading (2.7)
  include_vars:
    dir: vars
    ignore_unknown_extensions: True
    extensions: ["yaml", "yml", "json"]

- name: Copy MongoDB 6.0 binary to OM servers
  copy:
    src: ../../downloads/mongodb-enterprise-server-6.0.2-1.amzn2.x86_64.rpm
    dest: /home/ec2-user
    owner: ec2-user
    group: ec2-user
    mode: preserve

- name: Copy MongoDB Shell to OM servers
  copy:
    src: ../../downloads/mongodb-mongosh-1.6.0.x86_64.rpm
    dest: /home/ec2-user
    owner: ec2-user
    group: ec2-user
    mode: preserve

- name: Stop mongod if running/exists
  systemd:
    name: mongod
    state: stopped
  become: yes
  become_user: root
  register: output
  ignore_errors: true
  changed_when: false
  
- name: Install mongodb-enterprise
  yum:
    name: /home/ec2-user/mongodb-enterprise-server-6.0.2-1.amzn2.x86_64.rpm
    state: present
  become: yes
  become_user: root

- name: Install MongoDB Shell
  yum:
    name: /home/ec2-user/mongodb-mongosh-1.6.0.x86_64.rpm
    state: present
  become: yes
  become_user: root

- name: Move mongod.conf to appdb.conf
  command: mv /etc/mongod.conf /etc/appdb.conf
  become: yes
  become_user: root
  changed_when: false
  failed_when: false
  ignore_errors: true

- name: Copy AppDB conf to servers
  copy:
    src: ../../files/appdb.conf
    dest: /etc/appdb.conf
    owner: root
    group: root
    mode: "0744"
  become: yes
  become_user: root

- name: Copy appdb.service to servers
  copy:
    src: ../../files/appdb.service
    dest: /usr/lib/systemd/system/
    owner: root
    group: root
    mode: "0664"
  become: yes
  become_user: root

- name: Enable appdb service
  systemd:
    name: appdb
    enabled: yes
  become: yes
  become_user: root

- name: Reload services
  systemd:
    daemon_reload: yes
  become: yes
  become_user: root

- name: Create necessary dirs for data and logs
  file:
    path: "{{ item }}"
    state: directory
    owner: mongod
    group: mongod
    mode: "0755"
  with_items:
    - /data/appdb
    - /data/logs
  become: yes
  become_user: root

- name: Change Keyfile permissions and ownership
  file:
    path: /etc/mongodb.key
    owner: mongod
    group: mongod
    mode: "0400"
  become: yes
  become_user: root

- name: Restart service and wait for it to start
  block:
    - name: Start mongod service
      service:
        name: appdb
        state: started
        enabled: yes
      become: yes
      become_user: root

    - name: Wait for service to start
      wait_for:
        host: localhost
        port: 27000
        state: started
        delay: 10
        timeout: 300
        
- name: aap enable replication 1
  command: "mongosh --port 27000 --eval 'rs.initiate()'"
  run_once: true
  vars:
    HOST_COUNT: "{{ groups[group_name] | length }}"
  when: "HOST_COUNT | int >= 3"

- name: Create user for AppDB
  command: mongosh --port 27000 --eval 'db.createUser({user:"{{ mongodb_username }}",pwd:"{{ mongodb_password }}",roles:[{db:"admin",role:"root"}]})' admin
  delegate_to: "{{ groups[group_name].0 }}"
  run_once: true
  vars:
    HOST_COUNT: "{{ groups[group_name] | length }}"
  when: "HOST_COUNT | int >= 3"

- name: appdb.conf enable replication 2
  command: mongosh -u "{{ mongodb_username }}" -p "{{ mongodb_password }}" --port {{mongod_port }} --eval 'rs.add("{{groups[group_name].1 }}:{{ mongod_port }}")'
  delegate_to: "{{ groups[group_name].0 }}"
  run_once: true
  vars:
    HOST_COUNT: "{{ groups[group_name] | length }}"
  when: "HOST_COUNT | int >= 3"
  become: yes
  become_user: mongod
   
- name: appdb.conf enable replication 3
  command: mongosh -u "{{ mongodb_username }}" -p "{{ mongodb_password }}" --port {{mongod_port }} --eval 'rs.add("{{groups[group_name].2 }}:{{ mongod_port }}")'
  delegate_to: "{{ groups[group_name].0 }}"
  run_once: true
  vars:
    HOST_COUNT: "{{ groups[group_name] | length }}"
  when: "HOST_COUNT | int >= 3"
  become: yes
  become_user: mongod
